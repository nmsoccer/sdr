#!/bin/python
#coding=utf-8
import time;
import sys;
import getopt;
import struct;
instruct = """
#########################################################
This script is only for dump xml generated by sdr lib:'sdr_dump_struct'.
it parses xml to binary file,which could be unpacked by sdr lib:'sdr_unpack'

It only parse label like this:
<entry name="xx" type="xx" value="xx" size="xx" />
<version name="dump_version" value="xx" />
#########################################################
"""

#GLOBAL ENV
EXE_ENV = {"xml_file":"" , "bin_file":"" , "line_no":1 , "debug":{} , "version":0 , "dump_version":-1 , "dump_size":0 , 
"print_debug":0};



def show_help():
    print instruct;   
    print "-i <input xml file>"
    print "-o [output bin file] if 'output bin file' is not specified , default print to 'inputfile'.dump.bin"
    print "-h show help"
    print "-v print debug info"
    print "usage:" + sys.argv[0] + " -i <input xml file> -o [output bin file] [-v]";

def parse_option():
    try:  
        options , args = getopt.getopt(sys.argv[1:] , "hi:o:v");
    except getopt.GetoptError:
        print "input arg illegal!";
        show_help();
        return -1;

    for opt , arg in options:             
        if opt == "-h":
            show_help();
            return 1;
        elif opt == "-i":
            EXE_ENV["xml_file"] = arg;
        elif opt == "-o":
            EXE_ENV["bin_file"] = arg;
        elif opt == "-v":
            EXE_ENV["print_debug"] = 1;

    #check outputfile  
    if EXE_ENV["xml_file"] == "":
        print ">>ERR:no input xml file is specified!";
        show_help();
        return -1;        
    
    if EXE_ENV["bin_file"] == "":
        EXE_ENV["bin_file"] = EXE_ENV["xml_file"]+".dump.bin";
        print "output is set to:" + EXE_ENV["bin_file"];

    return 0;  

def write_bin(fp , basic_type , value , num=1):
    fmt = "";
    real_value = 0;

    #parse fmt and real_value
    if basic_type == "char":
        fmt = "B";
        real_value = int(value);
    elif basic_type == "unsigned char":
        fmt = "B";
        real_value = int(value);
    elif basic_type == "short":
        fmt = "H";
        real_value = int(value);
    elif basic_type == "unsigned short":
        fmt = "H";
        real_value = int(value);
    elif basic_type == "int":
        fmt = "I";
        real_value = int(value);
    elif basic_type == "unsigned int":
        fmt = "I";
        real_value = int(value);
    elif basic_type == "long":
        fmt = "L";
        if EXE_ENV["version"] < 3:
            real_value = long(value);
        else:
            real_value = int(value);
    elif basic_type == "unsigned long":
        fmt = "L";
        if EXE_ENV["version"] < 3:
            real_value = long(value);
        else:
            real_value = int(value);
    elif basic_type == "long long":
        fmt = "Q";
        if EXE_ENV["version"] < 3:
            real_value = long(value);
        else:
            real_value = int(value);
    elif basic_type == "char[]":    #array
        return write_byte_array(fp , basic_type , value , num);
    elif basic_type == "unsigned char[]":   #array
        return write_byte_array(fp , basic_type , value , num);
    else:
        print "illegal type %s" % (basic_type);
        return -1;

    str = struct.pack(fmt , real_value);
    fp.write(str);
    return struct.calcsize(fmt);

def write_byte_array(fp , type_name , array , num):
    "parase array like \"'a''b''0x1B'\""
    if num <= 0:
        print "write_byte_array failed! array len:%d" % (num);
        return -1;

    #check type_name
    if type_name == "char[]" or type_name == "unsigned char[]":
        fmt = "B";
    else:
        print "write_byte_array failed! type '%s' unknown!" % (type_name);
        return -1;

    #write each byte
    src_line = "" + array;
    sub_line = "";
    index = -1;
    writed = 0;
    str_value = "";
    real_value = 0;

    while True:
        #locate first '
        index = src_line.find("'");
        if index < 0:
            break;

        #forward
        sub_line = src_line[index+1:];
        
        #locate close '
        index = sub_line.find("'");
        if index < 0:
            print "write_byte_array failed! no close ' found! array:%s" % (array);
            return -1;

        #get value
        str_value = sub_line[:index];        
        if len(str_value)>2 and str_value[0] == '0' and str_value[1] == 'x': # like '0x1A'            
            real_value = int(str_value[2:] , 16);
        else:   #like 'A' 'B'
            real_value = ord(str_value);

        #write
        buff = struct.pack(fmt , real_value);
        fp.write(buff);
        writed = writed + 1;

        #update
        src_line = sub_line[index+1:];

    #check writes
    if writed != num:
        print "write_byte_array failed! writes %d but total %d" % (writed , num);
        return -1;

    return writed;

def parse_line(fp , line):
    "analyise src_line and write to binfile"
    if EXE_ENV["print_debug"] == 1:
        print "[%d] %s" % (EXE_ENV["line_no"] , line);
    head_index = 0;
    tail_index = 0;
    index = 0;
    src_line = "" + line;
    sub_line = "";
    str = "";
    attr_name = "";
    attr_value = "";
    line_no = EXE_ENV["line_no"];

    #ENV
    EXE_ENV["debug"][line_no] = {};
    debug_info = EXE_ENV["debug"][EXE_ENV["line_no"]];
    debug_info["line_no"] = line_no;

    #Get Label
    index = src_line.find('<');
    if head_index<0: #ctrl line
        return 0;

    sub_line = "" + src_line[index+1:];
    index = sub_line.find(' ');
    str = "" + sub_line[0:index];
    debug_info["label"] = str;

    #<version ... />  save it
    if str=="version":
        attr_name = "value";
        attr_value = fetch_attr_value(src_line , attr_name);
        if not attr_value:
            print "parse [%d]:%s failed! fetch attr '%s' but value not found!" % (line_no , line , attr_name);
            return -1;
        else:
            debug_info[attr_name] = int(attr_value);
            EXE_ENV["dump_version"] = int(attr_value);
            return 0;

    #<entry ... /> only            
    if str != "entry":
        return 0;

    #attr:name
    attr_name = "name";
    attr_value = fetch_attr_value(src_line , attr_name);
    if not attr_value:
        print "parse [%d]:%s failed! fetch attr '%s' but value not found!" % (line_no , line , attr_name);
        return -1;
    debug_info[attr_name] = attr_value;

    #attr:type
    attr_name = "type";
    attr_value = fetch_attr_value(src_line , attr_name);
    if not attr_value:
        print "parse [%d]:%s failed! fetch attr '%s' but value not found!" % (line_no , line , attr_name);
        return -1;
    debug_info[attr_name] = attr_value;

    #attr:size optional
    attr_name = "size";
    debug_info[attr_name] = 1;
    if attr_value=="char[]" or attr_value=="unsigned char[]":        
        attr_value = fetch_attr_value(src_line , attr_name);
        if not attr_value:
            print "parse [%d]:%s failed! fetch attr '%s' but value not found!" % (line_no , line , attr_name);
            return -1;
        debug_info[attr_name] = int(attr_value);


    #attr:value
    attr_name = "value";
    attr_value = fetch_attr_value(src_line , attr_name);
    if not attr_value:
        print "parse [%d]:%s failed! fetch attr '%s' but value not found!" % (line_no , line , attr_name);
        return -1;
    debug_info[attr_name] = attr_value;

    #write_bin
    writes = write_bin(fp , debug_info["type"] , debug_info["value"] , debug_info["size"]);
    if writes <= 0:
        print "parse [%d]:%s failed! write bin file error" % (line_no , line);
        return -1;
    else:
        debug_info["bytes"] = writes;        

    EXE_ENV["dump_size"] = EXE_ENV["dump_size"] + writes;
    return 0;


def fetch_attr_value(line , attr):
    "fetch attr value"
    src_line = "" + line;
    sub_line = "";
    index = 0;

    #search
    real_attr = attr + "=\"" ; # we construct attr= to more clearly
    index = src_line.find(real_attr);
    if index<0:
        print "attr:%s not found! line:%s" % (attr , line);
        return "";

    sub_line = src_line[index:];

    #match first "
    src_line = sub_line;
    index = src_line.find('"');
    if index<0:
        print "attr:%s has no value! line:%s" % (attr , line);
        return "";
    sub_line = src_line[index+1:];

    #match last "
    src_line = sub_line;
    index = src_line.find('"');
    if index<0:
        print 'attr %s not match last "! line:%s' % (attr , line);
        return "";
    sub_line = src_line[:index];
    return sub_line;


def main():
    #parse option
    ret = parse_option();  
    if ret != 0:
        return 0;

    #check version
    #sys.version_info(major=2, minor=7, micro=5, releaselevel='final', serial=0)
    EXE_ENV["version"] = sys.version_info[0];
    #if EXE_ENV["version"] >= 3:
    #    print "please use version below 3.0!";
    #    return 0;


    #open file
    xml_file = open(EXE_ENV["xml_file"] , "r");
    if not xml_file:
        print "open %s failed!" % (EXE_ENV["xml_file"]);
        return -1;

    bin_file = open(EXE_ENV["bin_file"] , "wb+");
    if not bin_file:
        print "open %s failed!" % (EXE_ENV["bin_file"]);
        return -1;
        #foward 8Bytes
    bin_file.seek(8 , 0);

    print time.strftime("[%Y-%m-%d %H:%M:%S]" , time.localtime()),;
    print "Ready to parse dump xml to binary file"
    #parse file    
    while True:
        line = xml_file.readline();
        if not line:
            break;
        #print "read :%s len:%d" % (line , len(line));
        ret = parse_line(bin_file , line);
        if ret == 0:
            EXE_ENV["line_no"] = int(EXE_ENV["line_no"]) + 1;
        else:
            break;

    bin_file.seek(0 , 0);
    buff = struct.pack("ii" ,  EXE_ENV["dump_version"] , EXE_ENV["dump_size"]);
    bin_file.write(buff);
    if EXE_ENV["print_debug"] == 1:
        print EXE_ENV;

    #check 
    if EXE_ENV["dump_version"]<0 or EXE_ENV["dump_size"]<=0:
        print "parse '%s' failed! dump_version:%d dump_size:%d" % (EXE_ENV["xml_file"] , EXE_ENV["dump_version"] , 
            EXE_ENV["dump_size"]);
        return -1;

    print "pares '%s' to '%s' success! bin_version:%d bin_size:%d" % (EXE_ENV["xml_file"] , EXE_ENV["bin_file"] , EXE_ENV["dump_version"] , 
        EXE_ENV["dump_size"]);
    return 0;


main();
